---
title: "Analysis of class surveys"
subtitle: "Answering 2 questions"
author: "Aakash Sriram, Aashish Krishnan, Achal Shah"
date: last-modified
published-title: "Updated"
editor: visual
format: html
code-copy: true
execute:
  message: false
  warning: false
  echo: false
  cache: true
---

```{r}
# load any other packages and read data here
library(tidyverse)
library(here)
```

## Executive summary

Using data from the PSTAT 197A Capstone intake survey, we examined how prior coursework and background experiences shape students' self-assessed proficiency, confidence, and programming language preferences. Our findings show that UCSB's technical coursework, particularly in Computer Science and Statistics appears effective in building students' programming and quantitative readiness. Students with two or more CS or PSTAT courses report higher confidence and proficiency across all technical domains, suggesting that the curriculum scaffolds skills well as students advance. Python overwhelmingly dominates as the preferred language (≈61%), but students with prior research experience show a greater inclination toward R, reflecting how lab-based or data-driven projects influence tool choice. Taken together, these results suggest that UCSB's coursework and research opportunities complement each other in cultivating both technical depth and tool diversity among data science students.

## Data description

Data collection: The dataset comes from the PSTAT 197a capstone intake survey which was given to the capstone students via google forms due on September 30. Responses were exported to CSV and accessible on GitHub. The repo includes three files: (1) background-clean.csv - background and preparation; (2) interest-clean.csv - project interests and preferred programming language and (3) survey-metadata.csv - a data dictionary mapping variable names to survey sections and the original question text.

**Sample:** Each record is one student and is keyed by response_id. We noticed 51-52 responses in total. when combining files, we join on response_id. This is a sample of enrolled capstone students (not UCSB as a whole). Some nonresponse is present because some students skipped individual questions.

**Measurements.** • Proficiency and confidence: prog.prof, math.prof, and stat.prof are ordered proficiency categories (Beginner/Intermediate/Advanced). prog.comf, math.comf, and stat.comf are integer ratings of confidence • Coursework background: upper-division coursework into 0--2, 3--5, 6--8, and 9+; additional columns indicate specific courses taken • Prior experience: boolean indicator of prior research experience (Yes/No) • Interests and language preference: in interest-clean.csv, lang records preferred programming language (R, Python, or No preference), type indicates preferred project type (individual vs both), and dom/area capture broader domains and specific areas of interest (multi-select, stored as semicolon-separated strings). • Metadata: survey-metadata.csv has variable names, survey sections (personal/background/interest), and original question wording.

## Questions of interest:

We sought to understand how students' academic preparation and background factors relate to their technical proficiency and language preferences. Specifically, our analysis addressed two key questions:

1.  How does prior coursework relate to self-assessed proficiency in programming, mathematics, and statistics?
2.  What factors, such as major, prior experience, and confidence, appear to influence which programming languages students prefer or feel most comfortable using?

## Findings

#### **Q1:** How does prior coursework relate to self-assessed proficiency in programming, mathematics, and statistics?

Our analysis examined how prior coursework in Computer Science (CS) and Statistics (PSTAT) relates to students' self-assessed proficiency and comfort across programming, math, and statistical skills. Four main figures summarize these relationships.

![](images/clipboard-4538303.png){width="435"}

Figure 1 shows that programming proficiency tends to increase with more prior CS coursework. Among students with no prior CS courses, most rated themselves as beginner or intermediate. In contrast, those who had taken two or more CS courses showed a higher proportion of advanced proficiency responses. This suggests that greater exposure to formal CS instruction correlates with higher self-assessed skill levels.

![](images/clipboard-4240590703.png){width="341"}

As shown in Figure 2, programming comfort (on a 1--5 scale) also rises with the number of CS courses taken. Students with two or more courses reported both higher medians and less variation in comfort levels compared to those with none or one course.

![](images/clipboard-1997007205.png){width="444"}

Figure 3 presents a similar pattern for statistics: students with two or more PSTAT courses were much more likely to rate their proficiency as intermediate or advanced compared to those with fewer courses. This again highlights that prior coursework strongly predicts perceived competence in quantitative subjects.

![](images/clipboard-458804387.png){width="469"}

Finally, Figure 4 shows a modest positive relationship between total prior technical coursework (CS, PSTAT, ECON, etc.) and programming comfort. The upward slope indicates that students who have completed more technical classes, regardless of the department, tend to feel more confident in programming.

To make patterns clearer, coursework counts were grouped into bins (0, 1, and 2 or more courses) to reduce noise from outliers and small sample sizes. Comfort was measured on a standardized 1--5 scale, and proficiency levels were coded as beginner, intermediate, and advanced for consistency across subjects.

Across all measures, prior coursework, especially in CS and PSTAT, shows a clear and consistent relationship with both technical proficiency and comfort. Students with more exposure to these subjects report higher skill levels and greater confidence, underscoring the importance of cumulative coursework in building technical readiness.

#### **Q2:** What factors, such as major, prior experience, and confidence, appear to influence which programming languages students prefer or feel most comfortable using?

Across all respondents, Python is the clear winner. From the bar chart:

-   Python: \~61.5%

-   No preference: \~21.2%

-   R: \~17.3%

Most students lean Python, while a smaller group prefers R and about one-fifth report no strong preference.

```{r}
knitr::include_graphics(
  here("results", "fig", "q2_lang_overall.png")
)
```

Interpretation: Python is the number one choice regardless of background

#### Research experience (prior exposure)

Language preferences vary by whether students report research experience (eg lab work):

-   With research experience, the share preferring R rises (≈22%) and Python falls modestly (≈56%) relative to those without research experience (R ≈ 12%, Python ≈ 65%). "No preference" is similar (≈22--24%) across groups.

```{r}
knitr::include_graphics(
  here("results", "fig", "q2_lang_by_research.png")
)
```

Interpretation: Research exposure appears to broaden adoption of R (perhaps via specific coursework, faculty tooling, or data-analysis workflows common in labs). Python remains the majority choice in both groups, but research shifts some share toward R.

#### Coursework & confidence

#### (a) Descriptive relationship

Plotting programming confidence vs. upper-division coursework bins (0--2, 3--5, 6--8, 9+) for each language shows:

-   Confidence trends up slightly with more coursework for those preferring Python and R (gentle positive slopes).

-   Students with no preference show a flat to slightly negative slope, with wide uncertainty, suggesting fewer strong signals.

```{r}
knitr::include_graphics(
  here("results", "fig", "q2_conf_vs_coursework_by_lang.png")
)
```

**Interpretation:** Advanced coursework is weakly associated with higher confidence, especially among students who already identify a preferred language. Lack of preference tends to be paired with lower and more variable confidence.

#### (b) Modeled relationship (multinomial logit)

A multinomial logistic regression predicting language preference (R vs. Python vs. No preference) from programming confidence and research experience (with an interaction) yields the predicted probabilities below. Confidence is shown on a 2--5 scale; panels split by research experience.

```{r}
knitr::include_graphics(
  here("results", "fig", "q2_multinom_pred_probs.png")
)
```

Confidence effect (holding research constant):

-   Python: probability increases as confidence rises (≈ 55% → 68% without research; ≈ 53% → 64% with research).

-   No preference: probability decreases as confidence rises (≈ 35% → 25% without research; ≈ 27% → 18% with research).

-   R: probability is low and fairly flat without research (\~6--7%), but higher and nearly flat with research (\~17--19%).

Research experience effect (holding confidence constant):

-   Shifts probability from Python toward R across the confidence range.

-   No-preference is modestly lower with research at higher confidence.

![](images/Screenshot%202025-10-19%20at%209.32.13%E2%80%AFPM.png)

The figure shows how language preference varies by the number of upper-division courses taken. Among students with 0--2 upper-division courses, the majority reported no clear language preference, suggesting limited programming exposure. As students completed 3--8 upper-division courses, Python became the dominant preference, likely reflecting its frequent use in intermediate coursework. Among students who completed 9 or more upper-division courses, the proportion of those preferring R increased noticeably, implying that R is more common in advanced or data-focused classes. Overall, this pattern indicates that coursework experience strongly influences language preference, with Python emerging early and R becoming more prominent at advanced levels.

![](images/Screenshot%202025-10-19%20at%209.32.24%E2%80%AFPM.png)

The graph above displays the distribution of self-reported programming confidence (on a 1--5 scale) across students' primary language preferences. Students who preferred R or Python generally reported higher programming confidence than those without a clear preference (NA). Both R and Python users had median confidence levels around 4, though R users showed a wider spread, indicating more variability in comfort levels. In contrast, students with no language preference tended to cluster around lower confidence scores. This suggests that students with higher confidence are more likely to identify with a specific programming language.
